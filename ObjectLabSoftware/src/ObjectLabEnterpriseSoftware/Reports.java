package ObjectLabEnterpriseSoftware;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 * 
 */
public class Reports extends javax.swing.JFrame {

    private static DefaultTableModel model;
    private static SQLMethods sqlMethods;
    private static ResultSet res;
    private static String excelFilePath;
    private static Workbook wb;
    private static Sheet sheet;
    private static Row row;
    private static Cell cell;
    InstanceCall inst;

    /**
     * Creates new form Reports
     */
    public Reports() {
        inst = new InstanceCall();
    }

    public void ReportsPage() {
        initComponents();
        sqlMethods = new SQLMethods();
        model = (DefaultTableModel) reportsTable.getModel();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchFilter = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchKey = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportsTable = new javax.swing.JTable();
        exportBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        costLbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Project Name", "Student", "Course", "Printer", "Build Name" }));
        searchFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFilterActionPerformed(evt);
            }
        });
        getContentPane().add(searchFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 44, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Object Lab Search");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setText("Search:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, 43, 21));
        getContentPane().add(searchKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 44, 451, -1));

        searchBtn.setText("Search");
        searchBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 44, 77, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 76, 682, 10));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Reports");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 92, -1, -1));

        reportsTable.setAutoCreateRowSorter(true);
        reportsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Project Name", "Student", "Course", "Printer", "Date Submitted", "Date Printed", "Build Name", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reportsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 118, 682, 203));

        exportBtn.setText("Export");
        exportBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });
        getContentPane().add(exportBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(567, 327, 61, -1));

        closeBtn.setText("Close");
        closeBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(closeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 327, 54, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Total Cost:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 330, -1, -1));

        costLbl.setText("$0.0");
        getContentPane().add(costLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 330, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ObjectLabEnterpriseSoftware/black and white bg.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, -8, 710, 370));

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem1.setText("Contents");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        //setVisible(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        /* All of the data that is being displayed and exported is found in the completedjobs table and retrieved here
            depending on what filter is triggered
        */
        if (searchFilter.getSelectedItem().equals("Project Name")) {
            // Code that searches database by project name
            res = sqlMethods.searchCompleted(searchKey.getText(), "fileName");
        } else if (searchFilter.getSelectedItem().equals("Student")) { //Needs to be modified to accomodate for Full Student Name and reflection in Query
            // Code that searches database by student
            res = sqlMethods.searchTwo("completedJobs", "firstName", "lastName", "%" + searchKey.getText() + "%");
            // res = sqlMethods.searchTwo("SELECT * FROM" + table + " WHERE (CustomerName = 'Alfreds' OR City = 'London');
        } else if (searchFilter.getSelectedItem().equals("Course")) {
            // Code that searches database by course   
            res = sqlMethods.searchTwo("completedJobs", "course", "section", "%" + searchKey.getText() + "%");
        } else if (searchFilter.getSelectedItem().equals("Printer")) {
            // Code that searches database by printer
            res = sqlMethods.searchOne("completedJobs", "printer", searchKey.getText());
        } else if (searchFilter.getSelectedItem().equals("Build Name")) {
            // Code that searches database by build
            res = sqlMethods.searchCompleted(searchKey.getText(), "buildName");
        }

        try {
            while (res.next()) {
                List<String> data = new LinkedList<>();
                data.add(res.getString("fileName"));
                data.add(res.getString("firstName") + " " + res.getString("lastName"));
                data.add(res.getString("course") + " " + res.getString("section"));
                data.add(res.getString("printer"));
                data.add(res.getString("dateStarted"));
                data.add(res.getString("dateCompleted"));
                data.add(res.getString("buildName"));
                data.add(res.getString("cost"));

                model.addRow(data.toArray());
            }

            updateCost();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(new JFrame(), "SQL Exception! Unable to Get Information from Database");
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void updateCost() {
        double total = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            total += Double.parseDouble(model.getValueAt(i, 7).toString()); //7 refers to column 'Cost'
        }
        costLbl.setText("$" + String.format("%.2f", total));
    }

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        // TODO add your handling code here:
        wb = new HSSFWorkbook();
        sheet = wb.createSheet("new sheet");
        row = null;
        cell = null;
        for (int i = 0; i < model.getRowCount(); i++) 
        {
            row = sheet.createRow(i);
            for (int j = 0; j < model.getColumnCount(); j++) 
            {
                cell = row.createCell(j);
                cell.setCellValue((String) model.getValueAt(i, j));
            }
        }
        try 
        {
            /* should change this to have the user pick where they want to export the new excel file */
            excelFilePath = "C:\\Printers\\Export" + searchFilter.getSelectedItem().toString() + ".xls";
            FileOutputStream out = new FileOutputStream(excelFilePath);
            wb.write(out);
            JOptionPane.showMessageDialog(new JFrame(), "Succesfully Exported File to " + excelFilePath);
            out.close();
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) 
        {
            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        try {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + inst.getPDFAdmin());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error");  //print the error
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void searchFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFilterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton closeBtn;
    private javax.swing.JLabel costLbl;
    private javax.swing.JButton exportBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable reportsTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox searchFilter;
    private javax.swing.JTextField searchKey;
    // End of variables declaration//GEN-END:variables
}
